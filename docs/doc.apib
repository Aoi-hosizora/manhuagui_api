FORMAT: 1A
HOST: localhost:10018/

# manhuagui-backend (1.0)

An unofficial backend for manhuagui written in golang/gin

[Aoi-hosizora - Website](https://github.com/Aoi-hosizora)

[Send email to Aoi-hosizora](mailto:aoihosizora@hotmail.com)

# Group Manga

manga-controller

## Get all mangas [/v1/manga{?page,order}]

### Get all mangas [GET]

`GET /v1/manga`

order by popular / new / update

+ Parameters

    + page (number, optional) - current page
        (format: int32)
    + order (string, optional) - order string

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<TinyMangaDto>>)

    + Headers

    + Body

## Get manga [/v1/manga/{mid}]

### Get manga [GET]

`GET /v1/manga/{mid}`

+ Parameters

    + mid (number, required) - manga id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<MangaDto>)

    + Headers

    + Body

## Get manga chapter [/v1/manga/{mid}/{cid}]

### Get manga chapter [GET]

`GET /v1/manga/{mid}/{cid}`

+ Parameters

    + mid (number, required) - manga id
        (format: int64)
    + cid (number, required) - manga chapter id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<MangaChapterDto>)

    + Headers

    + Body

# Group MangaList

manga-list-controller

## Get hot serial mangas [/v1/list/serial]

### Get hot serial mangas [GET]

`GET /v1/list/serial`

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<MangaGroupListDto>)

    + Headers

    + Body

## Get finished mangas [/v1/list/finish]

### Get finished mangas [GET]

`GET /v1/list/finish`

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<MangaGroupListDto>)

    + Headers

    + Body

## Get latest mangas [/v1/list/latest]

### Get latest mangas [GET]

`GET /v1/list/latest`

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<MangaGroupListDto>)

    + Headers

    + Body

## Get recent update mangas [/v1/list/updated{?page,limit}]

### Get recent update mangas [GET]

`GET /v1/list/updated`

+ Parameters

    + page (number, optional) - current page
        (format: int32)
    + limit (number, optional) - page size
        (format: int32)

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<TinyMangaDto>>)

    + Headers

    + Body

# Group Category

category-controller

## Get genres [/v1/category/genre]

### Get genres [GET]

`GET /v1/category/genre`

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<CategoryDto>>)

    + Headers

    + Body

## Get zones [/v1/category/zone]

### Get zones [GET]

`GET /v1/category/zone`

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<CategoryDto>>)

    + Headers

    + Body

## Get ages [/v1/category/age]

### Get ages [GET]

`GET /v1/category/age`

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<CategoryDto>>)

    + Headers

    + Body

## Get genre mangas [/v1/category/genre/{genre}{?zone,age,status,page,order}]

### Get genre mangas [GET]

`GET /v1/category/genre/{genre}`

order by popular / new / update

+ Parameters

    + genre (string, required) - genre name, (all|...)
    + zone (string, optional) - manga zone, (all|japan|hongkong|other|europe|china|korea)
    + age (string, optional) - manga age, (all|shaonv|shaonian|qingnian|ertong|tongyong)
    + status (string, optional) - manga status, (all|lianzai|wanjie)
    + page (number, optional) - current page
        (format: int32)
    + order (string, optional) - order string

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<TinyMangaDto>>)

    + Headers

    + Body

# Group Search

search-controller

## Search mangas [/v1/search/{keyword}{?page,order}]

### Search mangas [GET]

`GET /v1/search/{keyword}`

order by popular / new / update

+ Parameters

    + keyword (string, required) - search keyword
    + page (number, optional) - current page
        (format: int32)
    + order (string, optional) - order string

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<SmallMangaDto>>)

    + Headers

    + Body

# Group Author

author-controller

## Get all authors [/v1/author{?genre,zone,age,page,order}]

### Get all authors [GET]

`GET /v1/author`

order by popular / comic / update

+ Parameters

    + genre (string, optional) - author genre
    + zone (string, optional) - author zone
    + age (string, optional) - author age range, (shaonv|shaonian|qingnian|ertong|tongyong)
    + page (number, optional) - current page
        (format: int32)
    + order (string, optional) - order string

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<SmallAuthorDto>>)

    + Headers

    + Body

## Get author [/v1/author/{aid}]

### Get author [GET]

`GET /v1/author/{aid}`

+ Parameters

    + aid (number, optional) - author id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<AuthorDto>)

    + Headers

    + Body

## Get author mangas [/v1/author/{aid}/manga{?page,order}]

### Get author mangas [GET]

`GET /v1/author/{aid}/manga`

order by popular / new / update

+ Parameters

    + aid (number, required) - author id
        (format: int64)
    + page (number, optional) - current page
        (format: int32)
    + order (string, optional) - order string

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<SmallMangaDto>>)

    + Headers

    + Body

# Group Rank

rank-controller

## Get day ranking [/v1/rank/day{?type}]

### Get day ranking [GET]

`GET /v1/rank/day`

+ Parameters

    + type (string, optional) - manga genre / zone / age, empty or all if all

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<MangaRankDto>>)

    + Headers

    + Body

## Get week ranking [/v1/rank/week{?type}]

### Get week ranking [GET]

`GET /v1/rank/week`

+ Parameters

    + type (string, optional) - manga genre / zone / age, empty or all if all

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<MangaRankDto>>)

    + Headers

    + Body

## Get month ranking [/v1/rank/month{?type}]

### Get month ranking [GET]

`GET /v1/rank/month`

+ Parameters

    + type (string, optional) - manga genre / zone / age, empty or all if all

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<MangaRankDto>>)

    + Headers

    + Body

## Get total ranking [/v1/rank/total{?type}]

### Get total ranking [GET]

`GET /v1/rank/total`

+ Parameters

    + type (string, optional) - manga genre / zone / age, empty or all if all

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<MangaRankDto>>)

    + Headers

    + Body

# Group Comment

comment-controller

## Get manga comments [/v1/comment/manga/{mid}{?page}]

### Get manga comments [GET]

`GET /v1/comment/manga/{mid}`

+ Parameters

    + mid (number, required) - manga id
        (format: int64)
    + page (number, optional) - current page
        (format: int32)

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<CommentDto>>)

    + Headers

    + Body

# Group User

user-controller

## Login [/v1/user/login{?username,password}]

### Login [POST]

`POST /v1/user/login`

+ Parameters

    + username (string, required) - login username
    + password (string, required) - login password

+ Request (application/json)

    + Attributes

    + Headers

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<TokenDto>)

    + Headers

    + Body

## Check login [/v1/user/check_login]

### Check login [POST]

`POST /v1/user/check_login`

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: access token (string, required)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

## Get authorized user information [/v1/user/info]

### Get authorized user information [GET]

`GET /v1/user/info`

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: access token (string, required)

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<UserDto>)

    + Headers

    + Body

## Record manga for the authorized user [/v1/user/manga/{mid}/{cid}]

### Record manga for the authorized user [GET]

`GET /v1/user/manga/{mid}/{cid}`

+ Parameters

    + mid (number, required) - manga id
        (format: int64)
    + cid (number, required) - manga chapter id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: access token (string, required)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

# Group Shelf

shelf-controller

## Get shelf mangas [/v1/shelf{?page}]

### Get shelf mangas [GET]

`GET /v1/shelf`

+ Parameters

    + page (number, optional) - current page
        (format: int32)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: access token (string, required)

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<_Page<ShelfMangaDto>>)

    + Headers

    + Body

## Check manga in shelf, Save manga to shelf, Remove manga from shelf [/v1/shelf/{mid}]

### Check manga in shelf [GET]

`GET /v1/shelf/{mid}`

+ Parameters

    + mid (number, required) - manga id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: access token (string, required)

    + Body

+ Response 200 (application/json)

    + Attributes (_Result<ShelfStatusDto>)

    + Headers

    + Body

### Save manga to shelf [POST]

`POST /v1/shelf/{mid}`

+ Parameters

    + mid (number, required) - manga id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: access token (string, required)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

### Remove manga from shelf [DELETE]

`DELETE /v1/shelf/{mid}`

+ Parameters

    + mid (number, required) - manga id
        (format: int64)

+ Request (application/json)

    + Attributes

    + Headers

            Authorization: access token (string, required)

    + Body

+ Response 200 (application/json)

    + Attributes (Result)

    + Headers

    + Body

# Data Structures

## Result (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message

## AuthorDto (object)

+ aid (number, required) - author id
    (format: int64)
+ name (string, required) - author name
+ alias (string, required) - author alias
+ zone (string, required) - author zone
+ url (string, required) - author url
+ manga_count (number, required) - author manga count
    (format: int32)
+ newest_manga_id (number, required) - author newest manga id
    (format: int32)
+ newest_manga_title (string, required) - author newest manga title
+ newest_date (string, required) - author update newest date
+ average_score (number, required) - author average score
    (format: float)
+ introduction (string, required) - author introduction

## SmallAuthorDto (object)

+ aid (number, required) - author id
    (format: int64)
+ name (string, required) - author name
+ zone (string, required) - author zone
+ url (string, required) - author url
+ manga_count (number, required) - author manga count
    (format: int32)
+ newest_date (string, required) - author update newest date

## TinyAuthorDto (object)

+ aid (number, required) - author id
    (format: int64)
+ name (string, required) - author name
+ url (string, required) - author url

## CategoryDto (object)

+ name (string, required) - category name
+ title (string, required) - category title
+ url (string, required) - category link

## CommentDto (object)

+ cid (number, required) - comment id
    (format: int64)
+ uid (number, required) - user id
    (format: int64)
+ username (string, required) - username
+ avatar (string, required) - user avatar
+ gender (number, required) - user gender, 1: Male, 2: Female
    (format: int32)
+ content (string, required) - comment content
+ like_count (number, required) - comment liked count
    (format: int32)
+ reply_count (number, required) - comment reply count
    (format: int32)
+ reply_timeline (array[RepliedCommentDto], required) - comment reply timeline
+ comment_time (string, required) - comment create time

## RepliedCommentDto (object)

+ cid (number, required) - comment id
    (format: int64)
+ uid (number, required) - user id
    (format: int64)
+ username (string, required) - username
+ avatar (string, required) - user avatar
+ gender (number, required) - user gender, 1: Male, 2: Female
    (format: int32)
+ content (string, required) - comment content
+ like_count (number, required) - comment liked count
    (format: int32)
+ reply_count (number, required) - comment reply count
    (format: int32)
+ comment_time (string, required) - comment create time

## MangaDto (object)

+ mid (number, required) - manga id
    (format: int64)
+ title (string, required) - manga name
+ cover (string, required) - manga cover
+ url (string, required) - manga link
+ publish_year (string, required) - manga publish year
+ manga_zone (string, required) - manga zone
+ genres (array[CategoryDto], required) - manga genres
+ authors (array[TinyAuthorDto], required) - manga authors
+ alias (string, required) - manga alias name
+ finished (boolean, required) - manga is finished
+ newest_chapter (string, required) - manga last update chapter
+ newest_date (string, required) - manga last update date
+ brief_introduction (string, required) - manga brief introduction
+ introduction (string, required) - manga introduction
+ manga_rank (string, required) - manga rank
+ score_count (number, required) - manga score count
    (format: int32)
+ average_score (number, required) - manga average score
    (format: float)
+ per_scores (array[string], required) - manga per scores, skip 0, from 1 to 5
+ banned (boolean, required) - manga is banned
+ copyright (boolean, required) - has copyright
+ chapter_groups (array[MangaChapterGroupDto], required) - manga chapter groups

## MangaChapterDto (object)

+ cid (number, required) - chapter id
    (format: int64)
+ title (string, required) - chapter name
+ mid (number, required) - manga id
    (format: int64)
+ manga_title (string, required) - manga name
+ url (string, required) - chapter link
+ pages (array[string], required) - chapter pages
+ page_count (number, required) - chapter pages count
    (format: int32)
+ next_cid (number, required) - next chapter id
    (format: int64)
+ prev_cid (number, required) - prev chapter id
    (format: int64)
+ copyright (boolean, required) - has copyright

## SmallMangaDto (object)

+ mid (number, required) - manga id
    (format: int64)
+ title (string, required) - manga name
+ cover (string, required) - manga cover
+ url (string, required) - manga link
+ publish_year (string, required) - manga publish year
+ manga_zone (string, required) - manga zone
+ genres (array[CategoryDto], required) - manga genres
+ authors (array[TinyAuthorDto], required) - manga authors
+ finished (boolean, required) - manga is finished
+ newest_chapter (string, required) - manga last update chapter
+ newest_date (string, required) - manga last update date
+ brief_introduction (string, required) - manga brief introduction

## TinyMangaDto (object)

+ mid (number, required) - manga id
    (format: int64)
+ title (string, required) - manga name
+ cover (string, required) - manga cover
+ url (string, required) - manga link
+ finished (boolean, required) - manga is finished
+ newest_chapter (string, required) - manga last update chapter
+ newest_date (string, required) - manga last update date

## TinyMangaChapterDto (object)

+ cid (number, required) - chapter id
    (format: int64)
+ title (string, required) - chapter name
+ mid (number, required) - manga id
    (format: int64)
+ url (string, required) - chapter link
+ page_count (number, required) - chapter pages count
    (format: int32)
+ is_new (boolean, required) - chapter is uploaded newly

## MangaGroupDto (object)

+ title (string, required) - group title
+ mangas (array[TinyMangaDto], required) - group mangas

## MangaChapterGroupDto (object)

+ title (string, required) - group title
+ chapters (array[TinyMangaChapterDto], required) - group chapters

## MangaGroupListDto (object)

+ title (string, required) - list title
+ top_group (MangaGroupDto, required) - manga top page group
+ groups (array[MangaGroupDto], required) - manga groups
+ other_groups (array[MangaGroupDto], required) - manga other page groups

## MangaRankDto (object)

+ mid (number, required) - rank manga id
    (format: int64)
+ title (string, required) - rank manga title
+ url (string, required) - rank manga url
+ finished (boolean, required) - rank manga is finished
+ authors (string, required) - rank manga authors
+ newest_chapter (string, required) - rank manga newest chapter
+ newest_date (string, required) - rank manga newest date
+ order (number, required) - rank order
    (format: int32)
+ score (number, required) - rank manga score
    (format: float)
+ trend (number, required) - rank trend, 0: None, 1: Up, 2: Down
    (format: int32)

## ShelfMangaDto (object)

+ mid (number, required) - manga id
    (format: int64)
+ title (string, required) - manga name
+ cover (string, required) - manga cover
+ url (string, required) - manga link
+ newest_chapter (string, required) - manga last update chapter
+ newest_duration (string, required) - manga last update duration
+ last_chapter (string, required) - manga last read chapter
+ last_duration (string, required) - manga last read duration

## TokenDto (object)

+ token (string, required) - access token

## UserDto (object)

+ username (string, required) - user name
+ avatar (string, required) - user avatar
+ class (string, required) - user class (会员等级)
+ score (number, required) - user score (个人成长值)
    (format: int32)
+ login_ip (string, required) - user current login ip
+ last_login_ip (string, required) - user last login ip
+ register_time (string, required) - user register time
+ last_login_time (string, required) - user last login time

## ShelfStatusDto (object)

+ in (boolean, required) - manga is in the shelf
+ count (number, required) - manga starred count
    (format: int32)

## _Result<_Page<SmallAuthorDto>> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (_Page<SmallAuthorDto>, required) - response data

## _Page<SmallAuthorDto> (object)

+ page (number, required) - current page
    (format: int32)
+ limit (number, required) - page size
    (format: int32)
+ total (number, required) - data count
    (format: int32)
+ data (array[SmallAuthorDto], required) - page data

## _Result<AuthorDto> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (AuthorDto, required) - response data

## _Result<_Page<SmallMangaDto>> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (_Page<SmallMangaDto>, required) - response data

## _Page<SmallMangaDto> (object)

+ page (number, required) - current page
    (format: int32)
+ limit (number, required) - page size
    (format: int32)
+ total (number, required) - data count
    (format: int32)
+ data (array[SmallMangaDto], required) - page data

## _Result<_Page<CategoryDto>> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (_Page<CategoryDto>, required) - response data

## _Page<CategoryDto> (object)

+ page (number, required) - current page
    (format: int32)
+ limit (number, required) - page size
    (format: int32)
+ total (number, required) - data count
    (format: int32)
+ data (array[CategoryDto], required) - page data

## _Result<_Page<TinyMangaDto>> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (_Page<TinyMangaDto>, required) - response data

## _Page<TinyMangaDto> (object)

+ page (number, required) - current page
    (format: int32)
+ limit (number, required) - page size
    (format: int32)
+ total (number, required) - data count
    (format: int32)
+ data (array[TinyMangaDto], required) - page data

## _Result<_Page<CommentDto>> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (_Page<CommentDto>, required) - response data

## _Page<CommentDto> (object)

+ page (number, required) - current page
    (format: int32)
+ limit (number, required) - page size
    (format: int32)
+ total (number, required) - data count
    (format: int32)
+ data (array[CommentDto], required) - page data

## _Result<MangaDto> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (MangaDto, required) - response data

## _Result<MangaChapterDto> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (MangaChapterDto, required) - response data

## _Result<MangaGroupListDto> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (MangaGroupListDto, required) - response data

## _Result<_Page<MangaRankDto>> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (_Page<MangaRankDto>, required) - response data

## _Page<MangaRankDto> (object)

+ page (number, required) - current page
    (format: int32)
+ limit (number, required) - page size
    (format: int32)
+ total (number, required) - data count
    (format: int32)
+ data (array[MangaRankDto], required) - page data

## _Result<_Page<ShelfMangaDto>> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (_Page<ShelfMangaDto>, required) - response data

## _Page<ShelfMangaDto> (object)

+ page (number, required) - current page
    (format: int32)
+ limit (number, required) - page size
    (format: int32)
+ total (number, required) - data count
    (format: int32)
+ data (array[ShelfMangaDto], required) - page data

## _Result<ShelfStatusDto> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (ShelfStatusDto, required) - response data

## _Result<TokenDto> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (TokenDto, required) - response data

## _Result<UserDto> (object)

+ code (number, required) - status code
    (format: int32)
+ message (string, required) - status message
+ data (UserDto, required) - response data
